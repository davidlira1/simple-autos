image: openjdk:11

stages:
  - build
  - test
  - coverage
  - docker
  - deploy
build:
  stage: build
  script:
    ./gradlew assemble
  artifacts:
    paths:
      - build/libs/*.jar
test:
  needs:
    - build
  stage: test
  script:
    ./gradlew test
  artifacts:
    paths:
      - build/test-results/test/TEST*.xml
coverage:
  needs:
    - build
    - test
  stage: coverage
  script:
    - ./gradlew jacocoTestReport
    - ./gradlew jacocoTestCoverageVerification
  allow_failure: true
  artifacts:
    when: always
    paths:
      - build/reports/jacoco
docker:
  image: docker:20
  needs:
    - build
    - test
  stage: docker
  services:
    - docker:dind
  before_script:
    - echo $CI_BUILD_TOKEN | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE":"$CI_PIPELINE_IID" .
    - docker push "$CI_REGISTRY_IMAGE":"$CI_PIPELINE_IID"
    - docker tag "$CI_REGISTRY_IMAGE":"$CI_PIPELINE_IID" "$CI_REGISTRY_IMAGE":"latest"
    - docker push "$CI_REGISTRY_IMAGE":"latest"
#production:
#  stage: deploy
#  image: ruby:latest
#  script:
#    - apt-get update -qy
#    - apt-get install -y ruby-dev
#    - gem install dpl
#  #                        App name from prev step  Key from your heroku account
#    - dpl --provider=heroku --app=simple-autos-eliz-david-siyun --api-key=$HEROKU_API_KEY
#  only: # Heroku will ONLY deploy from main or master branch!
#    - master
deploy:
  stage: deploy
  image: registry.gitlab.com/galv-vmw-apr-2021/capstone/base-aws-eks-image:latest
  before_script:
    - export IMAGE="$CI_REGISTRY_IMAGE":"$CI_PIPELINE_IID"
    - aws configure set region us-west-2
    - aws configure set output json
    - aws eks update-kubeconfig --name "$CLUSTER_NAME"
    - aws sts get-caller-identity
  script:
    - envsubst < autos-deployment.yml | kubectl apply -f -
    - kubectl apply -f autos-service.yml
    - echo $CI_REGISTRY_IMAGE
    - echo $CI_PIPELINE_IID
